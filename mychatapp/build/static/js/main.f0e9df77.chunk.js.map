{"version":3,"sources":["logo.svg","components/auth/Login.js","firebase.js","components/UserInfo.js","components/layouts/Welcome.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Login","props","react_default","a","createElement","type","className","onClick","authenticate","viewBox","xmlns","d","id","fill","firebaseApp","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","UserInfo","state","email","displayName","authHandler","_callee","authData","user","regenerator_default","wrap","_context","prev","next","console","log","_this","setState","stop","this","provider","authProvider","auth","concat","signInWithPopup","then","logout","_callee2","_context2","signOut","_this2","onAuthStateChanged","react","auth_Login","Component","Welcome","components_UserInfo","App","BrowserRouter","Switch","Route","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f0e9df77.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react'\r\nimport { render } from 'react-dom'\r\nimport GoogleLogin from 'react-google-login';\r\n\r\nimport './button.css';\r\nconst responseGoogle = (response) => {\r\n  console.log(response);\r\n}\r\n\r\nconst Login = props => (\r\n\t<button type=\"button\" className=\"google-button\" onClick={() => props.authenticate(\"Google\")}>\r\n  <span className=\"google-button__icon\">\r\n    <svg viewBox=\"0 0 366 372\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M125.9 10.2c40.2-13.9 85.3-13.6 125.3 1.1 22.2 8.2 42.5 21 59.9 37.1-5.8 6.3-12.1 12.2-18.1 18.3l-34.2 34.2c-11.3-10.8-25.1-19-40.1-23.6-17.6-5.3-36.6-6.1-54.6-2.2-21 4.5-40.5 15.5-55.6 30.9-12.2 12.3-21.4 27.5-27 43.9-20.3-15.8-40.6-31.5-61-47.3 21.5-43 60.1-76.9 105.4-92.4z\" id=\"Shape\" fill=\"#EA4335\"/><path d=\"M20.6 102.4c20.3 15.8 40.6 31.5 61 47.3-8 23.3-8 49.2 0 72.4-20.3 15.8-40.6 31.6-60.9 47.3C1.9 232.7-3.8 189.6 4.4 149.2c3.3-16.2 8.7-32 16.2-46.8z\" id=\"Shape\" fill=\"#FBBC05\"/><path d=\"M361.7 151.1c5.8 32.7 4.5 66.8-4.7 98.8-8.5 29.3-24.6 56.5-47.1 77.2l-59.1-45.9c19.5-13.1 33.3-34.3 37.2-57.5H186.6c.1-24.2.1-48.4.1-72.6h175z\" id=\"Shape\" fill=\"#4285F4\"/><path d=\"M81.4 222.2c7.8 22.9 22.8 43.2 42.6 57.1 12.4 8.7 26.6 14.9 41.4 17.9 14.6 3 29.7 2.6 44.4.1 14.6-2.6 28.7-7.9 41-16.2l59.1 45.9c-21.3 19.7-48 33.1-76.2 39.6-31.2 7.1-64.2 7.3-95.2-1-24.6-6.5-47.7-18.2-67.6-34.1-20.9-16.6-38.3-38-50.4-62 20.3-15.7 40.6-31.5 60.9-47.3z\" fill=\"#34A853\"/></svg>\r\n  </span>\r\n  <span className=\"google-button__text\">Sign in with Google</span>\r\n</button>\r\n);\r\n\r\nexport default Login;","import * as firebase from 'firebase';\r\nconst config = {\r\n    apiKey: \"AIzaSyB46D4kmKCbj33u_9xUgb1V_TvLLWX8q18\",\r\n    authDomain: \"mychat-11c26.firebaseapp.com\",\r\n    databaseURL: \"https://mychat-11c26.firebaseio.com\",\r\n    projectId: \"mychat-11c26\",\r\n    storageBucket: \"mychat-11c26.appspot.com\",\r\n    messagingSenderId: \"107704014190\"\r\n  };\r\n\r\nconst firebaseApp = firebase.initializeApp(config);\r\nconst base = firebase.database();\r\n\r\nexport { firebaseApp };\r\nexport default base;","import React, { Component, Fragment } from \"react\";\r\nimport Login from \"./auth/Login\";\r\nimport firebase from \"firebase\";\r\nimport base, {firebaseApp} from \"../firebase\";\r\nimport \"./auth/button.css\"\r\nclass UserInfo extends Component {\r\n  state = {\r\n    email: null,\r\n    displayName: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    firebase.auth().onAuthStateChanged(user => {\r\n      if (user) {\r\n        this.authHandler({ user });\r\n      }\r\n    });\r\n  }\r\n\r\n  authHandler = async authData => {\r\n    console.log(authData);\r\n    const user = authData.user;\r\n    this.setState({\r\n      email: user.email,\r\n      displayName: user.displayName\r\n    });\r\n  };\r\n\r\n  authenticate = provider => {\r\n    console.log(provider);\r\n    const authProvider = new firebase.auth[`${provider}AuthProvider`]();\r\n    firebaseApp\r\n      .auth()\r\n      .signInWithPopup(authProvider)\r\n      .then(this.authHandler);\r\n  };\r\n\r\n  logout = async () => {\r\n    console.log(\"logout\");\r\n    await firebase.auth().signOut();\r\n    this.setState({email: null, displayName: null });\r\n  };\r\n\r\n  render() {\r\n    const logout = <button onClick={this.logout}>Log Out!</button>;\r\n    if (!this.state.email) {\r\n      return <Login authenticate={this.authenticate} />;\r\n    }\r\n    return (\r\n      <Fragment>\r\n        <div className=\"user-info\">\r\n          <label>User name:</label>\r\n          <span type=\"text\" id=\"email\">\r\n            {this.state.displayName}\r\n          </span>\r\n        </div>\r\n        <div className=\"user-info\">\r\n          <label>Email:</label>\r\n          <span type=\"text\" id=\"email\">\r\n            {this.state.email}\r\n          </span>\r\n        </div>\r\n        <div>{logout}</div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserInfo;","import React, {Component} from 'react'\r\nimport Login from '../auth/Login'\r\nimport './Welcome.css';\r\nimport UserInfo from \"..//UserInfo\";\r\nclass Welcome extends Component{\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t  <h1>MyChat</h1>\r\n\t\t\t  <h2 className = \"welcome-header\">\r\n\t\t\t  Welcome to my simple social chat app</h2>\r\n\t\t\t  <UserInfo/>\r\n\t\t\t \r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Welcome\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, combineReducers, compose } from 'redux'\nimport { reactReduxFirebase, firebaseReducer } from 'react-redux-firebase'\nimport firebase from 'firebase'\nimport Welcome from './components/layouts/Welcome';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n        \n        <Switch>\n          <Route path=\"/\" component ={Welcome}/>\n          \n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}